#include <stdio.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <string.h>
#include<time.h>
#include<unistd.h>
#include<arpa/inet.h>
#define PORT 8080
void fun()
{
    printf("user logged in \n");
    printf("Press enter when you want to logout\n");
    while(1)
    {
        if (getchar())
            break;
    }
       printf("user logged out \n");
}
int main(int argc, char const *argv[])
{
    struct sockaddr_in address;
    int sock = 0, valread, result, converted_number;
    time_t start_t, end_t;
    double diff_t;
    struct sockaddr_in serv_addr;
    char *username="GAURAV", *password="TIWARI";
    char buffer[1024] = {0};
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    {
        printf("\n Socket creation error \n");
        return -1;
    }
        memset(&serv_addr, '0', sizeof(serv_addr));
     serv_addr.sin_family = AF_INET;
     serv_addr.sin_port = htons(PORT);
         // Convert IPv4 and IPv6 addresses from text to binary form
    if(inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr)<=0)
    {
        printf("\nInvalid address/ Address not supported \n");
        return -1;
    } 
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
    {
        printf("\nConnection Failed \n");
        return -1;
    }
     result=send(sock , username , strlen(username) , 0 );
    if(result<0)
    {
        printf("\nSending Failed \n");
    }
    result=send(sock , password , strlen(password) , 0 );
    if(result<0)
    {
        printf("\nSending Failed \n");
    }
    printf("validating....\n");
    valread = read( sock , buffer, 1024);
    printf("%s\n",buffer );
    if(valread>0)
    {
       time(&start_t);
       func();
       time(&end_t);
       diff_t = difftime(end_t, start_t);
       printf("Usage Time of user = %f\n", diff_t);
       printf("proceed for billing...\n"); 
      converted_number = htonl(diff_t);
       write(sock, &converted_number, sizeof(converted_number));
    }
    //close(sock);
    return 0;
}
